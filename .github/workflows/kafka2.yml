name: Kafka2

on:
  workflow_dispatch:

jobs:
  update-topicos-kafka:
    runs-on: ubuntu-latest
    environment: dev
    env:
      CONFIG_PATH: config.json
    steps:
      - name: Checkout reposit√≥rio principal
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get Content from Wiki
        env:
          WIKI_API_TOKEN: ${{ secrets.WIKI_API_TOKEN }}
        run: |
          echo "üîç Fetching content from Wiki.js..."
          QUERY=$(cat << EOF
          {         
            pages {
              single (id:27) {
                content
              }
            }
          }
          EOF
          )

          echo $QUERY

          echo "üì§Fetching API"

          JSON_PAYLOAD=$(jq -n --arg q "$QUERY" '{query: $q}')


          RESPONSE=$(curl -s -X POST "https://wiki.franquinho.info/graphql" \
            -H "Authorization: Bearer $WIKI_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$JSON_PAYLOAD")
          
          echo "‚úÖ CURL Fetch Done"
          
          CONTENT=$(echo "$RESPONSE" | jq -c '.data.pages.single.content')
          CONTENT="${CONTENT//\"/}"

          echo "‚úÖ Content fetched: $CONTENT"
          echo "CONTENT=$CONTENT" >> "$GITHUB_ENV"
      
      - name: Update Content
        env:
          CONTENT: ${{ env.CONTENT }}
        run: |
          CONFIG_FILE="${{ env.CONFIG_PATH }}"
          echo "Lendo config de: $CONFIG_FILE"
          
          topicName=$(jq -r '.metadata.topicName' "$CONFIG_FILE")
          topicDescription=$(jq -r '.metadata.topicDescription' "$CONFIG_FILE")

          link="https://dev.azure.com/CTTPortugal/Technology/_git/pt.technology.kafka.documentation?path=/$topicName"

          echo "Nome do T√≥pico: $topicName"
          echo "Descri√ß√£o do T√≥pico: $topicDescription"
          
          update="| $topicName | $topicDescription | [Link]($link) | Ativo |"
          echo $update

          new_content=$CONTENT"\n"$update

          echo "‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏èNEW CONTENT:"
          echo $new_content

          echo "üì§ Send Content to GITHUB ENV"
          echo "new_content="$new_content >> "$GITHUB_ENV"
          echo Done
      
      - name: Fetch current tags from Wiki.js
        env:
          WIKI_API_TOKEN: ${{ secrets.WIKI_API_TOKEN }}
        run: |
          echo "üîç Fetching current tags from Wiki.js..."
          QUERY=$(cat << EOF
          {         
            pages {
              single (id:27) {
                id
                title
                tags{tag}
              }
            }
          }
          EOF
          )

          echo "Query: $QUERY"

          echo "üì§Fetching API"

          JSON_PAYLOAD=$(jq -n --arg q "$QUERY" '{query: $q}')


          RESPONSE=$(curl -s -X POST "https://wiki.franquinho.info/graphql" \
            -H "Authorization: Bearer $WIKI_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$JSON_PAYLOAD")
          
          echo "‚úÖ CURL Fetch Done"
          
          TAGS=$(echo "$RESPONSE" | jq -c '[.data.pages.single.tags[].tag]')
          echo "‚úÖ Tags fetched: $TAGS"
          echo "TAGS=$TAGS" >> "$GITHUB_ENV"
      
      - name: Create GRAPH_QUERY to Update WIKI Page
        env:
          new_content: ${{ env.new_content }}
        run: |
          escaped_content=$(printf '%s' "$new_content" | sed 's/\\/\\\\/g; s/"/\\"/g')

          echo "üîß Preparing GraphQL query..."
          GRAPHQL_QUERY=$(cat << EOF
          mutation UpdatePage(\$id: ID!, \$content: String!, \$tags: [String!]) {
            pages {
              update(
                  id: \$id,
                  content: \$content,
                  editor: "markdown",
                  isPrivate: false,
                  isPublished: true,
                  locale: "en",
                  tags: \$tags
                ) {
                responseResult {
                  succeeded
                  slug
                  message
                }
                page{
                  id
                  title
                  path
                  updatedAt
                }
              }
            }
          }
          EOF
          )
          echo "‚úÖ GraphQL query prepared."

          echo "Variables"
          VARIABLES=$(jq -n \
            --arg id "28" \
            --arg content "$new_content" \
            --argjson tags "$TAGS" \
            '{id: ($id | tonumber), content: $content, tags: $tags}')'
          
          echo "Variables Prepared"

          echo $GRAPHQL_QUERY
          echo $VARIABLES
          
          escape_for_github_env() {
            echo "$1" | python3 -c "import sys,json; print(json.dumps(sys.stdin.read())[1:-1])"
            }

          
          echo "üì§ Send Query to GITHUB ENV"
          echo "GRAPHQL_QUERY=$(escape_for_github_env "$GRAPHQL_QUERY")" >> $GITHUB_ENV
          echo "GRAPHQL_VARIABLES=$(escape_for_github_env "$VARIABLES")" >> $GITHUB_ENV

          #echo "GRAPHQL_QUERY="$GRAPHQL_QUERY >> "$GITHUB_ENV"
          echo Done

      - name: Upload Content to Wiki.js
        env:
          WIKI_API_TOKEN: ${{ secrets.WIKI_API_TOKEN }}
          GRAPHQL_QUERY: ${{ env.GRAPHQL_QUERY }}
          GRAPHQL_VARIABLES: ${{ env.GRAPHQL_VARIABLES }}
        run: |
          echo "üîß Preparing JSON PAYLOAD..."
          #JSON_PAYLOAD=$(jq -n --arg q "$GRAPHQL_QUERY" '{query: $q}')
          echo "‚úÖ JSON PAYLOAD prepared."

          echo "üöÄ Sending request to Wiki.js API..."
          curl -X POST "https://wiki.franquinho.info/graphql" \
            -H "Authorization: Bearer $WIKI_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"query\": \"$GRAPHQL_QUERY\", \"variables\": $GRAPHQL_VARIABLES}"