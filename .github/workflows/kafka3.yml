name: Kafka3

on:
  workflow_dispatch:

jobs:
  update-topicos-kafka:
    runs-on: ubuntu-latest
    environment: dev
    env:
      CONFIG_PATH: config.json

    steps:
      - name: Checkout reposit√≥rio principal
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Content from Wiki
        env:
          WIKI_API_TOKEN: ${{ secrets.WIKI_API_TOKEN }}
        run: |
          echo "üîç Fetching content from Wiki.js..."
          QUERY=$(cat << EOF
          {         
            pages {
              single (id:27) {
                content
              }
            }
          }
          EOF
          )

          JSON_PAYLOAD=$(jq -n --arg q "$QUERY" '{query: $q}')

          RESPONSE=$(curl -s -X POST "https://wiki.franquinho.info/graphql" \
            -H "Authorization: Bearer $WIKI_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$JSON_PAYLOAD")

          echo "$RESPONSE" | jq -r '.data.pages.single.content' > wiki_content.md
          echo "‚úÖ Content saved to wiki_content.md"

          echo "üìÑ Primeiras linhas do conte√∫do Inicial:"
          head -30 wiki_content.md | cat -n

      - name: Update Content
        run: |
          CONFIG_FILE="${{ env.CONFIG_PATH }}"
          topicName=$(jq -r '.metadata.topicName' "$CONFIG_FILE")
          topicDescription=$(jq -r '.metadata.topicDescription' "$CONFIG_FILE")
          link="https://dev.azure.com/CTTPortugal/Technology/_git/pt.technology.kafka.documentation?path=/$topicName"
          update="| $topicName | $topicDescription | [Link]($link) | Ativo |"

          echo "üîß Nova linha: $update"

          header="| Nome do T√≥pico | Descri√ß√£o | Detalhes/Link Documenta√ß√£o | Estado |"
          separator="|--|--|--|--|"

          # Remove BOM e normaliza o ficheiro
          sed '1s/^\xEF\xBB\xBF//' wiki_content.md | tr -d '\r' > wiki_content_clean.md

          # Encontra a linha do cabe√ßalho da tabela
          start_line=$(grep -Fn "$header" wiki_content_clean.md | cut -d: -f1 | head -n1)
          if [ -z "$start_line" ]; then
            echo "‚ùå Erro: Cabe√ßalho da tabela n√£o encontrado!"
            exit 1
          fi

          sep_line=$((start_line + 1))
          total_lines=$(wc -l < wiki_content_clean.md)
          end_line=$sep_line

          # Percorre at√© ao fim da tabela
          while [ $end_line -lt $total_lines ]; do
            next_line=$((end_line + 1))
            line=$(sed -n "${next_line}p" wiki_content_clean.md)
            if [[ "$line" =~ ^\| ]]; then
              end_line=$next_line
            else
              break
            fi
          done

          # Divide o conte√∫do
          head_content=$(sed -n "1,$((start_line - 1))p" wiki_content_clean.md)
          table_header=$(sed -n "$start_line p" wiki_content_clean.md)
          table_separator=$(sed -n "$sep_line p" wiki_content_clean.md)
          table_rows=$(sed -n "$((sep_line + 1)),$end_line p" wiki_content_clean.md)
          tail_content=$(sed -n "$((end_line + 1)),$total_lines p" wiki_content_clean.md)

          # Verifica se j√° existe
          if echo "$table_rows" | grep -Fq "| $topicName |"; then
            echo "‚ö†Ô∏è T√≥pico '$topicName' j√° existe na tabela. Nenhuma altera√ß√£o feita."
          else
            echo "‚úÖ T√≥pico n√£o encontrado. Adicionando e ordenando."
            table_rows=$(echo -e "$table_rows\n$update" | sort -t'|' -k2,2)
          fi

          # Recria o ficheiro completo
          {
            echo "$head_content"
            echo "$table_header"
            echo "$table_separator"
            echo "$table_rows"
            echo "$tail_content"
          } > wiki_content.md

          cp wiki_content.md content_to_upload.md

          echo "üìÑ Primeiras linhas do conte√∫do final:"
          head -30 content_to_upload.md | cat -n


      - name: Fetch current tags from Wiki.js
        env:
          WIKI_API_TOKEN: ${{ secrets.WIKI_API_TOKEN }}
        run: |
          QUERY=$(cat << EOF
          {         
            pages {
              single (id:27) {
                tags { tag }
              }
            }
          }
          EOF
          )

          JSON_PAYLOAD=$(jq -n --arg q "$QUERY" '{query: $q}')

          RESPONSE=$(curl -s -X POST "https://wiki.franquinho.info/graphql" \
            -H "Authorization: Bearer $WIKI_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$JSON_PAYLOAD")

          TAGS=$(echo "$RESPONSE" | jq -c '[.data.pages.single.tags[].tag]')
          echo "TAGS=$TAGS" >> "$GITHUB_ENV"

      - name: Prepare GraphQL Payload
        env:
          TAGS: ${{ env.TAGS }}
        run: |
          echo "üõ† Preparing GraphQL payload..."

          GRAPHQL_QUERY=$(cat << 'EOF'
          mutation UpdatePage($id: Int!, $content: String!, $tags: [String!]) {
            pages {
              update(
                id: $id,
                content: $content,
                editor: "markdown",
                isPrivate: false,
                isPublished: true,
                locale: "en",
                tags: $tags
              ) {
                responseResult {
                  succeeded
                  slug
                  message
                }
                page {
                  id
                  title
                  path
                  updatedAt
                }
              }
            }
          }
          EOF
          )

          RAW_CONTENT=$(cat content_to_upload.md)

          VARIABLES=$(jq -n \
            --arg id "28" \
            --arg content "$RAW_CONTENT" \
            --argjson tags "$TAGS" \
            '{id: ($id | tonumber), content: $content, tags: $tags}')

          echo "$GRAPHQL_QUERY" > query.graphql
          echo "$VARIABLES" > variables.json

      - name: Upload Content to Wiki.js
        env:
          WIKI_API_TOKEN: ${{ secrets.WIKI_API_TOKEN }}
        run: |
          echo "üöÄ Uploading updated content to Wiki.js..."

          JSON_PAYLOAD=$(jq -n \
            --arg query "$(cat query.graphql)" \
            --argjson variables "$(cat variables.json)" \
            '{query: $query, variables: $variables}')

          curl -X POST "https://wiki.franquinho.info/graphql" \
            -H "Authorization: Bearer $WIKI_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD"

          echo "‚úÖ Upload complete."
