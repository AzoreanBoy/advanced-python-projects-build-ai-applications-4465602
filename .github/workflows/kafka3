name: Kafka3

on:
  workflow_dispatch:

jobs:
  update-topicos-kafka:
    runs-on: ubuntu-latest
    environment: dev
    env:
      CONFIG_PATH: config.json

    steps:
      - name: Checkout reposit√≥rio principal
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Content from Wiki
        env:
          WIKI_API_TOKEN: ${{ secrets.WIKI_API_TOKEN }}
        run: |
          echo "üîç Fetching content from Wiki.js..."
          QUERY=$(cat << EOF
          {         
            pages {
              single (id:27) {
                content
              }
            }
          }
          EOF
          )

          JSON_PAYLOAD=$(jq -n --arg q "$QUERY" '{query: $q}')

          RESPONSE=$(curl -s -X POST "https://wiki.franquinho.info/graphql" \
            -H "Authorization: Bearer $WIKI_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$JSON_PAYLOAD")

          echo "$RESPONSE" | jq -r '.data.pages.single.content' > wiki_content.md
          echo "‚úÖ Content saved to wiki_content.md"

      - name: Update Content
        run: |
          CONFIG_FILE="${{ env.CONFIG_PATH }}"
          topicName=$(jq -r '.metadata.topicName' "$CONFIG_FILE")
          topicDescription=$(jq -r '.metadata.topicDescription' "$CONFIG_FILE")
          link="https://dev.azure.com/CTTPortugal/Technology/_git/pt.technology.kafka.documentation?path=/$topicName"
          update="| $topicName | $topicDescription | [Link]($link) | Ativo |"

          echo "üîß New row: $update"

          # Ensure table exists
          if ! grep -q '| T√≥pico | Descri√ß√£o | Link | Status |' wiki_content.md; then
            echo "‚ö†Ô∏è Tabela n√£o encontrada. Criando nova tabela."
            echo -e "| T√≥pico | Descri√ß√£o | Link | Status |\n|--------|-----------|------|--------|\n$update" > wiki_content.md
          else
            # Check if topic already exists
            if grep -q "| $topicName |" wiki_content.md; then
              echo "‚ö†Ô∏è T√≥pico '$topicName' j√° existe. Pulando."
            else
              # Append new row
              echo "$update" >> wiki_content.md
              echo "‚úÖ Linha adicionada."
            fi
          fi

          # Sort the Kafka table alphabetically
          awk '
            BEGIN { in_table = 0; row_count = 0 }

            # Table header
            /^\| T√≥pico \| Descri√ß√£o \| Link \| Status \|/ {
              print; in_table = 1; next
            }

            # Separator
            in_table && /^\|[-]+/ {
              print; next
            }

            # Table rows
            in_table && /^\|/ {
              rows[row_count++] = $0; next
            }

            # End of table or outside
            !in_table || !/^\|/ {
              if (in_table && row_count > 0) {
                n = asort(rows, sorted_rows)
                for (i = 0; i < n; i++) print sorted_rows[i]
                in_table = 0
              }
              print
            }

            END {
              if (in_table && row_count > 0) {
                n = asort(rows, sorted_rows)
                for (i = 0; i < n; i++) print sorted_rows[i]
              }
            }
          ' wiki_content.md > tmp.md && mv tmp.md wiki_content.md

          echo "‚úÖ Tabela ordenada alfabeticamente."

          cp wiki_content.md content_to_upload.md

      - name: Fetch current tags from Wiki.js
        env:
          WIKI_API_TOKEN: ${{ secrets.WIKI_API_TOKEN }}
        run: |
          QUERY=$(cat << EOF
          {         
            pages {
              single (id:27) {
                tags { tag }
              }
            }
          }
          EOF
          )

          JSON_PAYLOAD=$(jq -n --arg q "$QUERY" '{query: $q}')

          RESPONSE=$(curl -s -X POST "https://wiki.franquinho.info/graphql" \
            -H "Authorization: Bearer $WIKI_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data "$JSON_PAYLOAD")

          TAGS=$(echo "$RESPONSE" | jq -c '[.data.pages.single.tags[].tag]')
          echo "TAGS=$TAGS" >> "$GITHUB_ENV"

      - name: Prepare GraphQL Payload
        env:
          TAGS: ${{ env.TAGS }}
        run: |
          echo "üõ† Preparing GraphQL payload..."

          GRAPHQL_QUERY=$(cat << 'EOF'
          mutation UpdatePage($id: Int!, $content: String!, $tags: [String!]) {
            pages {
              update(
                id: $id,
                content: $content,
                editor: "markdown",
                isPrivate: false,
                isPublished: true,
                locale: "en",
                tags: $tags
              ) {
                responseResult {
                  succeeded
                  slug
                  message
                }
                page {
                  id
                  title
                  path
                  updatedAt
                }
              }
            }
          }
          EOF
          )

          RAW_CONTENT=$(cat content_to_upload.md)

          VARIABLES=$(jq -n \
            --arg id "28" \
            --arg content "$RAW_CONTENT" \
            --argjson tags "$TAGS" \
            '{id: ($id | tonumber), content: $content, tags: $tags}')

          echo "$GRAPHQL_QUERY" > query.graphql
          echo "$VARIABLES" > variables.json

      - name: Upload Content to Wiki.js
        env:
          WIKI_API_TOKEN: ${{ secrets.WIKI_API_TOKEN }}
        run: |
          echo "üöÄ Uploading updated content to Wiki.js..."

          JSON_PAYLOAD=$(jq -n \
            --arg query "$(cat query.graphql)" \
            --argjson variables "$(cat variables.json)" \
            '{query: $query, variables: $variables}')

          curl -X POST "https://wiki.franquinho.info/graphql" \
            -H "Authorization: Bearer $WIKI_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD"

          echo "‚úÖ Upload complete."
